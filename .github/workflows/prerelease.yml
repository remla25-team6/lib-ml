name: Pre-release

on:
  push:
    branches:
      - main

env:
  PYTHON_VERSION: '3.10'  # Set your desired Python version here

jobs:
  prerelease:
    runs-on: ubuntu-latest

    permissions:
      contents: write  # Permissions for creating release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
          pip install .

      - name: Get latest tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_ENV

      - name: Calculate pre-release version
        run: |
          VERSION=${latest_tag#v}  # Strip the "v" from the tag
          MAJOR=$(echo "$VERSION" | cut -d . -f 1)
          MINOR=$(echo "$VERSION" | cut -d . -f 2)
          PATCH=$(echo "$VERSION" | cut -d . -f 3)
          PATCH=$((PATCH + 1))  # Increment the patch version for pre-release
          DATETIME=$(date +%Y%m%d.%H%M%S)  # Use timestamp for uniqueness
          NEW_VERSION="$MAJOR.$MINOR.$PATCH-pre.$DATETIME"
          echo "version=$NEW_VERSION" >> $GITHUB_ENV
          echo "version_major=$MAJOR" >> $GITHUB_ENV
          echo "version_minor=$MINOR" >> $GITHUB_ENV
          echo "version_patch=$PATCH" >> $GITHUB_ENV

      - name: Update version in pyproject.toml
        run: |
          # Replace the version in pyproject.toml with the pre-release version
          sed -i "s/^version = \".*\"/version = \"${{ env.version }}\"/" pyproject.toml
          cat pyproject.toml

      - name: Build package
        run: python -m build
        env:
          VERSION: ${{ env.version }}
          MAJOR: ${{ env.version_major }}
          MINOR: ${{ env.version_minor }}
          PATCH: ${{ env.version_patch }}

      - name: Tag pre-release commit
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag v${{ env.version }}
          git push origin v${{ env.version }}

      - name: Create GitHub pre-release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.version }}
          prerelease: true  # Mark this as a prerelease
